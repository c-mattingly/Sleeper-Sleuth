{"version":3,"sources":["utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","components/SearchBar/SearchBar.jsx","components/InfoCard/InfoCard.jsx","components/TeamCard/TeamCard.jsx","components/LeagueCard/LeagueCard.jsx","components/LeagueFeed/LeagueFeed.jsx","pages/HomePage/HomePage.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","Error","tokenService","logout","login","creds","headers","Headers","stringify","getUser","SignUpPage","props","LoginPage","SearchBar","handleFormSubmit","useState","leagueSearch","setLeagueSearch","Container","id","onSubmit","e","preventDefault","TextField","htmlFor","target","value","Button","color","type","InfoCard","userName","userAvatar","userID","classes","leagues","console","log","length","Card","className","root","CardActionArea","CardContent","Typography","gutterBottom","variant","component","src","TeamCard","team","rosters","roster","playerDB","find","owner_id","user_id","metadata","avatar","toLowerCase","display_name","team_name","settings","wins","losses","ties","fpts","waiver_budget_used","LeagueCard","league","teams","setTeams","setRosters","setPlayerDB","teamsUrl","league_id","rostersUrl","useEffect","data","name","Accordion","AccordionSummary","expandIcon","total_rosters","AccordionDetails","map","index","rosterInd","LeagueFeed","Grid","useStyles","makeStyles","theme","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","HomePage","setUserName","setUserID","setUserAvatar","setLeagues","userUrl","leaguesUrl","container","justifyContent","item","xs","App","userService","setUser","handleSignUpOrLogin","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2906cbec.chunk.js","sourcesContent":["function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup, \n  logout,\n  login,\n  getUser\n};","import React, { useState } from 'react';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\n\nimport userService from '../../utils/userService';\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function SignUpPage(props){\n\n\n\n \n    \n    return (\n        \n       \n           <h1>SIGNUP PAGE</h1>\n        \n        \n      );   \n    \n}\n","import React, { useState } from 'react';\nimport './LoginPage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport userService from '../../utils/userService';\n\n\nexport default function LoginPage(props){\n    \n\n    return (\n      \n          \n             <h1>setup signup PAGE</h1>\n    \n      \n      );\n}\n\n","import React, { useState } from 'react'; \nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport default function SearchBar({handleFormSubmit}) {\n    const [leagueSearch, setLeagueSearch] = useState(\"\");\n\n    function handleInput(e) {\n        setLeagueSearch(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        handleFormSubmit(leagueSearch);\n    }\n\n\n    return (\n        <Container id=\"SearchBar-container\">\n            <form onSubmit={handleSubmit}>\n            <TextField id=\"SearchBar-textField\" \n            htmlFor=\"leagueSearch\" \n            id=\"filled-search\" \n            label=\"Sleeper Username\" \n            type=\"text\" \n            variant=\"standard\"\n            value={leagueSearch}\n            onChange={handleInput} />\n            <Button color=\"primary\" type=\"submit\">Search</Button>\n            </form>\n        </Container>\n    )\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n\nexport default function InfoCard({userName, userID, userAvatar, classes, leagues}) {\n\nconsole.log(leagues.length)\n\nif ((userName) && (userName !== \"Username Not Found\")) {\n    return (\n        <Card className={classes.root}>\n            <CardActionArea>\n                <CardContent>\n                    <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                    <img id=\"InfoCard-avatar\" src={`https://sleepercdn.com/avatars/${userAvatar}`} /> {userName}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n                        <b>Leagues:</b> {leagues.length}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n} else if (!userName) {\n    return (\n        <h3></h3>\n    )\n\n} else {\n    return (\n        <h3>Username Not Found</h3>\n    )\n    \n}\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport RosterCard from '../RosterCard/RosterCard';\n\n\nexport default function TeamCard({ classes, team, rosters, userName, playerDB }) {\n\n    const roster = rosters.find(({ owner_id }) => owner_id === team.user_id);\n\n    if ((roster) && (userName !== \"Username Not Found\")) {\n        return (\n            <div id=\"TeamCard-card\">\n            <Card className={classes.root} >\n                <CardActionArea>\n                    <CardContent>\n                    {/* <Accordion>\n                            <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\"> */}\n\n                        <Typography gutterBottom variant=\"h4\" component=\"h2\" className=\"teamNameWithAvatar\">\n                            <img id=\"TeamCard-avatar\" src={team.metadata.avatar ? team.metadata.avatar : `https://sleepercdn.com/avatars/${team.avatar}`} /> <br />\n                            <span className={userName.toLowerCase() === team.display_name.toLowerCase() ? \"UserTeam\" : \"OtherTeam\"}>{team.metadata.team_name ? team.metadata.team_name : team.display_name}</span>\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n                            <b>WINS:</b> {roster.settings.wins} &nbsp;\n                            <b>LOSSES:</b> {roster.settings.losses} &nbsp;\n                            <b>TIES:</b> {roster.settings.ties} &nbsp; <br />\n                            <b>TOTAL FANTASY POINTS:</b> {roster.settings.fpts} &nbsp; <br />\n                            <b>FAAB SPENT:</b> {roster.settings.waiver_budget_used} &nbsp;\n                        </Typography>\n                        {/* </AccordionSummary>\n                        <AccordionDetails>\n                        */}\n                        {/* <Typography>\n                            \n                            {roster.players.map((player, index) => {\n\n                                return (\n                                    <RosterCard\n                                        classes={classes}\n                                        player={player}\n                                        key={index}\n                                        roster={roster}\n                                        playerDB={playerDB}\n                                    />\n                                );\n                            })}\n                        </Typography> */}\n                      \n                        {/* </AccordionDetails>\n                        </Accordion> */}\n                    </CardContent>\n                </CardActionArea>\n            </Card>\n            </div>\n        )\n    } else {\n        return (\n            <h3></h3>\n        )\n    }\n\n}","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport TeamCard from '../TeamCard/TeamCard';\nimport RosterCard from '../RosterCard/RosterCard';\n\n\n\n\nexport default function LeagueCard({ classes, league, userName }) {\n    const [teams, setTeams] = useState();\n    const [rosters, setRosters] = useState();\n    const [playerDB, setPlayerDB] = useState();\n    const teamsUrl = `https://api.sleeper.app/v1/league/${league.league_id}/users`\n    const rostersUrl = `https://api.sleeper.app/v1/league/${league.league_id}/rosters`\n    const playerDBUrl = \"/players.json\"\n\n\n    useEffect(() => {\n        if (league.league_id) {\n\n            fetch(teamsUrl)\n\n                .then((res) => res.json())\n                .then((data) => {\n                    setTeams(data)\n                    console.log(data)\n                });\n        }\n    }, [league.league_id]);\n\n    useEffect(() => {\n        if (league.league_id) {\n\n            fetch(rostersUrl)\n\n                .then((res) => res.json())\n                .then((data) => {\n                    setRosters(data)\n                    console.log(data)\n                });\n        }\n    }, [league.league_id]);\n\n    useEffect(() => {\n        if (league.league_id) {\n\n            fetch(playerDBUrl)\n\n                .then((res) => res.json())\n                .then((data) => {\n                    setPlayerDB(data)\n                    console.log(data)\n                });\n        }\n    }, [league.league_id]);\n\n    if ((teams) && (rosters) && (userName !== \"Username Not Found\")) {\n        if (league.avatar) {\n        return (\n            <div id=\"LeagueCard-card\">\n            <Card className={classes.root} >\n                <CardActionArea >\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                            <img id=\"LeagueCard-avatar\" src={`https://sleepercdn.com/avatars/${league.avatar}`} /> <br />\n                            {league.name}\n                        </Typography>\n                        <Accordion id=\"LeagueCard-accordion\">\n                            <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n                                    <b>Number of Teams: </b> {league.total_rosters}\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <div className=\"TeamCard-container\">\n                                <Typography>\n\n                                    {teams.map((team, index) => {\n\n                                        return (\n                                            <TeamCard\n                                                classes={classes}\n                                                team={team}\n                                                key={index}\n                                                rosters={rosters}\n                                                rosterInd={index}\n                                                userName={userName}\n                                                playerDB={playerDB}\n                                            />\n                                        );\n                                    })}\n                                </Typography>\n                                </div>\n                            </AccordionDetails>\n\n                        </Accordion>\n                    </CardContent>\n                </CardActionArea>\n            </Card >\n            </div>\n        )\n                                } else{\n                                    return (\n                                        <div id=\"LeagueCard-card\">\n            <Card className={classes.root} >\n                <CardActionArea >\n                    <CardContent>\n                        <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                            {league.name}\n                        </Typography>\n                        <Accordion id=\"LeagueCard-accordion\">\n                            <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"h4\">\n                                    <b>Number of Teams: </b> {league.total_rosters}\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <div className=\"TeamCard-container\">\n                                <Typography>\n\n                                    {teams.map((team, index) => {\n\n                                        return (\n                                            <TeamCard\n                                                classes={classes}\n                                                team={team}\n                                                key={index}\n                                                rosters={rosters}\n                                                rosterInd={index}\n                                                userName={userName}\n                                                playerDB={playerDB}\n                                            />\n                                        );\n                                    })}\n                                </Typography>\n                                </div>\n                            </AccordionDetails>\n\n                        </Accordion>\n                    </CardContent>\n                </CardActionArea>\n            </Card >\n            </div>\n                                    )\n                                }\n    } else {\n        return (\n            <h3></h3>\n        )\n    }\n}","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LeagueCard from '../LeagueCard/LeagueCard';\n\nexport default function LeagueFeed({\n    leagues,\n    classes,\n    userName\n}) {\n\n    return (\n        <Grid>\n\n            {leagues.map((league, index) => {\n\n                return (\n                    <LeagueCard\n                        classes={classes}\n                        league={league}\n                        key={index}\n                        userName={userName}\n                    />\n                );\n            })}\n        </Grid>\n    )\n\n\n\n}","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport InfoCard from '../../components/InfoCard/InfoCard';\nimport LeagueFeed from '../../components/LeagueFeed/LeagueFeed';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  }));\n\nexport default function HomePage() {\n    const [userName, setUserName] = useState();\n    const [userID, setUserID] = useState();\n    const [userAvatar, setUserAvatar] = useState();\n    const [leagues, setLeagues] = useState([]);\n    const classes = useStyles();\n    const userUrl = `https://api.sleeper.app/v1/user/${userName}`\n    const leaguesUrl = `https://api.sleeper.app/v1/user/${userID}/leagues/nfl/2021`\n\n    function handleFormSubmit(userName) {\n        setUserName(userName);\n    }\n\n    useEffect(() => {\n        if (userName) {\n\n            fetch(userUrl)\n\n                .then((res) => res.json())\n                .then((data) => {\n                    if (data) {\n                    setUserID(data.user_id)\n                    setUserAvatar(data.avatar)\n                    console.log(data.avatar)\n                    console.log(data)\n                    } else if (data == 0){\n                        setUserName(\"\")\n\n                    }else {\n                        setUserName(\"Username Not Found\")\n                    }\n                });\n        }\n    }, [userName]);\n\n    useEffect(() => {\n        if (userID) {\n\n            fetch(leaguesUrl)\n\n                .then((res) => res.json())\n                .then((data) => {\n                    setLeagues(data)\n                    console.log(data)\n                });\n        }\n    }, [userID]);\n\n    return (\n        <>\n            <img id=\"logo\" src=\"/sleuthlogo.gif\"></img>\n\n            <div className={classes.root}>\n                <Grid container spacing={3} justifyContent=\"center\">\n                    <Grid item xs={12}>\n                        <SearchBar handleFormSubmit={handleFormSubmit} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <InfoCard \n                        classes={classes} \n                        userID={userID} \n                        userName={userName}\n                        userAvatar={userAvatar}\n                        leagues={leagues} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <LeagueFeed\n                        classes={classes} \n                        leagues={leagues}\n                        userName={userName} />\n                    </Grid>\n                </Grid>\n            </div>\n            <div id=\"copyright\">\n                ©2021 Mike Mattingly\n            </div>\n        </>\n\n\n    );\n\n\n}\n","import React, {useState} from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport HomePage from '../HomePage/HomePage';\nimport userService from '../../utils/userService'\n\n\nfunction App() {\n\n  const [user, setUser] = useState(userService.getUser()) // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like \n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin(){\n    setUser(userService.getUser()) // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout(){\n    userService.logout();\n    setUser({user: null})\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/login\">\n             <LoginPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/signup\">\n             <SignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          {/* {userService.getUser() ?  */}\n            <> \n             <Switch>\n                <Route exact path=\"/\">\n                    <HomePage />\n                </Route>\n            </Switch>\n            </>\n            {/* : */}\n            <Redirect to='/'/>\n          {/* } */}\n  \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}